g$ms_verlauf <- as.factor(g$ms_verlauf) # change to factor
library(psych) #activate dplyr  to perform summary analysis
basic_variables_cont. <- c("edss", "age", "GFAP_singlePlex", "NfL_singlePlex", "Disease_duration", "Progression_Duration", "ms_verlauf")
basic_variables_data <- g[basic_variables_cont.]
describeBy(basic_variables_data, basic_variables_data$ms_verlauf)
library(psych) #activate dplyr  to perform summary analysis
basic_variables_cont. <- c("edss", "age", "GFAP_singlePlex", "NfL_singlePlex", "Disease_duration", "Progression_Duration", "ms_verlauf")
basic_variables_data <- g[basic_variables_cont.]
describeBy(basic_variables_data, basic_variables_data$ms_verlauf)
describeBy(basic_variables_data, basic_variables_data$ms_verlauf)
library(ggplot2)
hist(basic_variables_data)
ggplot2.histogram(basic_variables_data)
library(devtools)
install_github("easyGgplot2", "kassambara")
install_github("easyGgplot2")
install.packages("ggpubr")
library(ggpubr)
gghistogram(expr,
x = c("age","edss","GFAP_singlePlex",
y= "..count..",
color = ".x.", fill = ".x.",
merge = FALSE,
xlab = ".x."
gghistogram(expr,
x = c("age","edss","GFAP_singlePlex",
y= "..count..",
color = ".x.", fill = ".x.",
merge = FALSE,
xlab = ".x.",
ylab = "Count",
add = "median",
add = "mean")
gghistogram(expr,
+             x = c("age","edss","GFAP_singlePlex",
+             y= "..count..",
+             color = ".x.", fill = ".x.",
+             merge = FALSE,
+             xlab = ".x.",
+             ylab = "Count",
+             add = "median",
+             add = "mean"))
gghistogram(expr, x = c("age","edss","GFAP_singlePlex", y= "..count..", color = ".x.", fill = ".x.", merge = FALSE, xlab = ".x.", ylab = "Count", add = "median", add = "mean")
gghistogram(expr, x = c("age","edss","GFAP_singlePlex", y= "..count..", color = ".x.", fill = ".x.", merge = FALSE, xlab = ".x.", ylab = "Count", add = "median", add = "mean"))
gghistogram(expr, x = age, y= "..count..", color = ".x.", fill = ".x.", merge = FALSE, xlab = ".x.", ylab = "Count", add = "median", add = "mean"))
gghistogram(expr, x = g$age, y= "..count..", color = ".x.", fill = ".x.", merge = FALSE, xlab = ".x.", ylab = "Count", add = "median", add = "mean"))
gghistogram(g, x = c("age","edss","GFAP_singlePlex", y= "..count..", color = ".x.", fill = ".x.", merge = FALSE, xlab = ".x.", ylab = "Count", add = "median", add = "mean"))
gghistogram(g, x = c("age","edss","GFAP_singlePlex"), y= "..count..", color = ".x.", fill = ".x.", merge = FALSE, xlab = ".x.", ylab = "Count", add = "median", add = "mean"))
gghistogram(g, x = c("age","edss","GFAP_singlePlex"), y= "..count..", color = ".x.", fill = ".x.", merge = FALSE, xlab = ".x.", ylab = "Count", add = "median", add = "mean")
gghistogram(g, x = age), y= "..count..", color = ".x.", fill = ".x.", merge = FALSE, xlab = ".x.", ylab = "Count", add = "median", add = "mean")
gghistogram(g, x = age, y= "..count..", color = ".x.", fill = ".x.", merge = FALSE, xlab = ".x.", ylab = "Count", add = "median", add = "mean")
gghistogram(g, x = age, y= "..count..")
gghistogram(g, x = g$age, y= "..count..")
gghistogram(g, x = g$age y= "..count..")
gghistogram(x = g$age y= "..count..")
gghistogram(g, x = g$age, y= "..count..")
gghistogram(x = g$age, y= "..count..")
gghistogram(g, x = g$age, y= "..count..", combine = FALSE)
gghistogram(g, x = g["age"], y= "..count..", combine = FALSE)
gghistogram(g, x = "age", y= "..count..", combine = FALSE)
gghistogram(g, x = "age", y= "..count..")
gghistogram(g, x = c("age","edss", y= "..count..", combine = FALSE)
gghistogram(g, x = c("age","edss"), y= "..count..", combine = FALSE)
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE)
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", add = "median")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = c("mean","median")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = c("mean","median"))
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = c"mean", rug = TRUE)
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE)
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = "dataset", palette = "jco")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = g, palette = "jco")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = ".x.", palette = "jco")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = TRUE, ylab = "Count", add = "mean", rug = TRUE, palette = "jco")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = TRUE, ylab = "Count", add = "mean", rug = TRUE, color = "dataset")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = TRUE, ylab = "Count", add = "mean", rug = TRUE, color = ".x.")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = ".x.")
install.packages("ggsci")
library(ggsci)
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = ".x.")
library(ggpubr)
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = "")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = ".x.")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = "black")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = "dataset", palette = "lacet")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = "green", palette = "lacet")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, color = "grey", fill = "grey", palette = "lacet")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", merge = TRUE, ylab = "Count", add = "mean", rug = TRUE, color = "grey", fill = "grey", palette = "lacet")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", merge = TRUE, ylab = "Count", add = "mean", rug = TRUE, color = "dataset", fill = "dataset", palette = "lacet")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", merge = TRUE, ylab = "Count", add = "mean", rug = TRUE, color = "dataset", palette = "lacet")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", merge = TRUE, ylab = "Count", add = "mean", rug = TRUE, color = "dataset", palette = "joc")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = TRUE, ylab = "Count", add = "mean", rug = TRUE, color = "dataset", palette = "joc")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = TRUE, ylab = "Count", add = "mean", rug = TRUE, color = "dataset", palette = "joc")
gghistogram(g, x = c("age","edss","GFAP_singlePlex","NfL_singlePlex"), y= "..count..", combine = TRUE, ylab = "Count", add = "mean", rug = TRUE, palette = "joc")
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, bins = 50)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, bins = 256)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", rug = TRUE, bins = 25)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, linetype = "solid")
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 0.5)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 1)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 5)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = c("mean", "median"), fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = c= "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
gghistogram(g, x = "edss", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
gghistogram(g, x = "edss", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 2)
gghistogram(g, x = "edss", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 1)
gghistogram(g, x = "edss", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 0,5)
gghistogram(g, x = "edss", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 0.5)
gghistogram(g, x = "GFAP_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 0.5)
gghistogram(g, x = "GFAP_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 1)
gghistogram(g, x = "GFAP_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 3)
gghistogram(g, x = "GFAP_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 109
gghistogram(g, x = "GFAP_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 10)
gghistogram(g, x = "GFAP_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 10)
gghistogram(g, x = "GFAP_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 15)
gghistogram(g, x = "NfL_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 15)
gghistogram(g, x = "NfL_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 0,5)
gghistogram(g, x = "NfL_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 0.5)
gghistogram(g, x = "NfL_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 2)
gghistogram(g, x = "NfL_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 3)
gghistogram(g, x = "NfL_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 2)
gghistogram(g, x = "NfL_singlePlex", y= "..density..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 2)
gghistogram(g, x = "NfL_singlePlex", y= "..density..", combine = FALSE, add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 2)
c <- describeBy(basic_variables_data, basic_variables_data$ms_verlauf)
library(psych)
c <- describeBy(basic_variables_data, basic_variables_data$ms_verlauf)
t <- matrix(c, nrow= 8, ncol = 3)
t
rm(c)
rm(t)
library(dplyr)
shapiro.test(g$edss)
shapiro.test(g$age)
shapiro.test(g$GFAP_singlePlex)
shapiro.test(g$NfL_singlePlex)
shapiro.test(g$Disease_duration)
g$edss_log <- log(g$edss)
g$gfap_log <- log(g$GFAP_singlePlex)
g$Nfl_log <- log(g$NfL_singlePlex)
g$dis_duration_log <- log(g$Disease_duration)
g$GFAP/NfL <- g$GFAP_singlePlex/g$NfL_singlePlex
g$GFAP_NfL <- g$GFAP_singlePlex/g$NfL_singlePlex
gghistogram(g, x = "GFAP_NfL", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
library(ggpubr)
gghistogram(g, x = "GFAP_NfL", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
shapiro.test(g$GFAP_NfL)
g$GFAP_NfL_log <- log(g$GFAP_NfL)
Table(basic_variables_cont.,g$ms_verlauf)
table(basic_variables_cont.,g$ms_verlauf)
rm(basic_variables)
basic_variables_cont <- basic_variables_cont.
rm(basic_variables_cont.)
cor.mtx <- cor(basic_variables_cont, use = "complete.obs", method = "spearman")
cor_mtx_parameter <- g[,"age", "edss", "Disease_duration", "GFAP_NfL", "GFAP_singlePlex", "NfL_singlePlex"]
cor_mtx_parameter <- g[,c("age", "edss", "Disease_duration", "GFAP_NfL", "GFAP_singlePlex", "NfL_singlePlex")]
cor.mtx <- cor(basic_variables_cont, use = "complete.obs", method = "spearman")
cor.mtx <- cor(cor_mtx_parameter, use = "complete.obs", method = "spearman")
round(cor.mtx,2)
library(Hmisc
)
rcorr(as.matrix(cor.mtx))
library(GGally)
GGally::ggcorr(cor_mtx_parameter, label = TRUE, label_size = 3)
GGally::ggcorr(cor_mtx_parameter, label = TRUE, label_size = 3)
pairs(~g$age+g$NfL_SPlex+g$GFAP_SPlex+g$edss+g$Disease_duration+g$GFAP_NfL,  data = g)
pairs(~g$age+ g$NfL_singlePlex+ g$GFAP_singlePlex +g$edss+g$Disease_duration+g$GFAP_NfL,  data = g)
cor_mtx_parameter
round(cor.mtx,2)
mcor <- round(cor.mtx,2)
upper.tri(mcor)
upper <- mcor
upper[upper.tri(mcor)] <- ""
upper <- as.data.frame(upper)
upper
install.packages("xtable")
library(xtable)
print(xtable(upper), type = "html")
print(xtable(upper), type = "latex")
print(xtable(upper))
# x is a matrix containing the data
# method : correlation method. "pearson"" or "spearman"" is supported
# removeTriangle : remove upper or lower triangle
# results :  if "html" or "latex"
# the results will be displayed in html or latex format
corstars <-function(x, method=c("pearson", "spearman"), removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r # Matrix of correlation coeficients
p <- correlation_matrix$P # Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****", ifelse(p < .001, "*** ", ifelse(p < .01, "**  ", ifelse(p < .05, "*   ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
corstars(g[,c("edss","age")], method = "spearman")
corstars(g[,c("edss","age")], method = "spearman", result = "html")
corstars(g[,c("edss","age")], method = "spearman", result = "html")
corstars(g[,c("edss","age","GFAP_NfL_log", "NfL_singlePlex", "GFAP_NfL","Disease_duration")], method = "spearman", result = "html")
#read data to g
library(haven)
g <- read_sav("Data/Endfile.sav")
#change mslauf to ms-Verlauf with only PPMS(1) and SPMS(2)
g$ms_verlauf <- length(g$mslauf)
g$ms_verlauf[g$mslauf == 4] <- "PPMS"
g$ms_verlauf[g$mslauf == 3] <- "SPMS"
g$ms_verlauf <- as.factor(g$ms_verlauf) # change to factor
#calculate ratio
g$GFAP_NfL <- g$GFAP_singlePlex/g$NfL_singlePlex
#find out if normal
shapiro.test(g$edss)
shapiro.test(g$age)
shapiro.test(g$GFAP_singlePlex)
shapiro.test(g$NfL_singlePlex)
shapiro.test(g$Disease_duration)
shapiro.test(g$GFAP_NfL)
#creat log values
g$edss_log <- log(g$edss)
g$gfap_log <- log(g$GFAP_singlePlex)
g$Nfl_log <- log(g$NfL_singlePlex)
g$dis_duration_log <- log(g$Disease_duration)
g$GFAP_NfL_log <- log(g$GFAP_NfL)
#activate psych to perform summary analysis
library(psych)
basic_variables_cont <- c("edss", "age", "GFAP_singlePlex", "NfL_singlePlex", "GFAP_NfL", "Disease_duration", "Progression_Duration", "ms_verlauf")
basic_variables_data <- g[basic_variables_cont]
describeBy(basic_variables_data, basic_variables_data$ms_verlauf)
#histograms
#change width through binwidth =
# dached line = mean, can be changed to median
# can change the black lining through color = "desired color"
# combine = false -> law 3ndi akter mi parameter fi x= c("age","edss") -> combine/ merge can be changed to TRUE
library(ggpubr)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
gghistogram(g, x = "edss", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 0.5)
gghistogram(g, x = "GFAP_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 15)
gghistogram(g, x = "NfL_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 2)
gghistogram(g, x = "GFAP_NfL", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
#add corstars
# x is a matrix containing the data
# method : correlation method. "pearson"" or "spearman"" is supported
# removeTriangle : remove upper or lower triangle
# results :  if "html" or "latex"
# the results will be displayed in html or latex format
corstars <-function(x, method=c("pearson", "spearman"), removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r # Matrix of correlation coeficients
p <- correlation_matrix$P # Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****", ifelse(p < .001, "*** ", ifelse(p < .01, "**  ", ifelse(p < .05, "*   ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
corstars(g[,c("edss","age","GFAP_NfL_log", "NfL_singlePlex", "GFAP_NfL","Disease_duration")], method = "spearman", result = "html")
install.packages("kableExtra")
devtools::install_github("haozhu233/kableExtra")
library(knitr)
library(kableExtra)
library(knitr)
Html_table <-corstars(g[,c("edss","age","GFAP_NfL_log", "NfL_singlePlex", "GFAP_NfL","Disease_duration")], method = "spearman", result = "html")
kable(Html_table)
Html_table %>%
kable() %>%
kable_styling()
kable(Html_table) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
rstudioapi::viewer(Html_table)
install.packages("htmlTable")
library(htmlTable)
htmlTable(Html_table)
correlations_table <- corstars(g[,c("edss","age","GFAP_singlePlex", "NfL_singlePlex", "GFAP_NfL","Disease_duration")], method = "spearman", result = "html", removeTriangle = "lower")
library(xtable)
corstars(g[,c("edss","age","GFAP_singlePlex", "NfL_singlePlex", "GFAP_NfL","Disease_duration")], method = "spearman", result = "html", removeTriangle = "lower")
corr_table <- corstars(g[,c("edss","age","GFAP_singlePlex", "NfL_singlePlex", "GFAP_NfL","Disease_duration")], method = "spearman", result = "html", removeTriangle = "lower")
htmlTable(corr_table)
htmlTable(corr_table, align = "rrrr|r")
htmlTable(corr_table)
corr_table_edss_bio <- corstars(g[,c("edss","age","GFAP_singlePlex", "NfL_singlePlex", "GFAP_NfL","Disease_duration")], method = "spearman", result = "html")
htmlTable(corr_table_edss_bio)
lm_edss_gfap <- lm(g$edss_log ~ g$gfap_log + g$age + g$dis_duration_log + factor(g$sex) + factor(g$ongoing))
library(labelled)
remove_labels(g$sex)
remove_labels(g$ongoing)
remove_labels(g$sex)
lm_edss_gfap <- lm(g$edss_log ~ g$gfap_log + g$age + g$dis_duration_log + factor(g$sex) + factor(g$ongoing))
summary(lm_edss_gfap)
lm_edss_gfap <- lm(g$edss_log ~ g$gfap_log + g$age + g$dis_duration_log + factor(g$sex) + factor(g$ongoing) + factor(g$ms_verlauf))
summary(lm_edss_gfap)
lm_gfap_gfap <- lm(g$gfap_log ~ g$edss_log + g$age + g$dis_duration_log + factor(g$sex) + factor(g$ongoing) + factor(g$ms_verlauf))
summary(lm_gfap_gfap)
lm_edss_gfap <- lm(g$edss_log ~ g$gfap_log + g$age + g$dis_duration_log + factor(g$sex) + factor(g$ongoing) + factor(g$ms_verlauf))
summary(lm_edss_gfap)
lm_edss_nfl <- lm(g$edss_log ~ g$Nfl_log + g$age + g$dis_duration_log + factor(g$sex) + factor(g$ongoing) + factor(g$ms_verlauf))
summary(lm_edss_nfl)
lm_edss_GFAP_nfl <- lm(g$edss_log ~ g$GFAP_NfL_log + g$age + g$dis_duration_log + factor(g$sex) + factor(g$ongoing) + factor(g$ms_verlauf))
summary(lm_edss_GFAP_nfl)
#read data to g
library(haven)
g <- read_sav("Data/Endfile.sav")
View(g)
#change mslauf to ms-Verlauf with only PPMS(1) and SPMS(2)
g$ms_verlauf <- length(g$mslauf)
g$ms_verlauf[g$mslauf == 4] <- "PPMS"
g$ms_verlauf[g$mslauf == 3] <- "SPMS"
g$ms_verlauf <- as.factor(g$ms_verlauf) # change to factor
#remove labels
library(labelled)
remove_labels(g$ongoing)
remove_labels(g$sex)
#calculate ratio
g$GFAP_NfL <- g$GFAP_singlePlex/g$NfL_singlePlex
#find out if normal
shapiro.test(g$edss)
shapiro.test(g$age)
shapiro.test(g$GFAP_singlePlex)
shapiro.test(g$NfL_singlePlex)
shapiro.test(g$Disease_duration)
shapiro.test(g$GFAP_NfL)
#creat log values
g$edss_log <- log(g$edss)
g$gfap_log <- log(g$GFAP_singlePlex)
g$Nfl_log <- log(g$NfL_singlePlex)
g$dis_duration_log <- log(g$Disease_duration)
g$GFAP_NfL_log <- log(g$GFAP_NfL)
#activate psych to perform summary analysis
library(psych)
basic_variables_cont <- c("edss", "age", "GFAP_singlePlex", "NfL_singlePlex", "GFAP_NfL", "Disease_duration", "Progression_Duration", "ms_verlauf")
basic_variables_data <- g[basic_variables_cont]
describeBy(basic_variables_data, basic_variables_data$ms_verlauf)
#histograms
#change width through binwidth =
# dached line = mean, can be changed to median
# can change the black lining through color = "desired color"
# combine = false -> law 3ndi akter mi parameter fi x= c("age","edss") -> combine/ merge can be changed to TRUE
library(ggpubr)
gghistogram(g, x = "age", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
gghistogram(g, x = "edss", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 0.5)
gghistogram(g, x = "GFAP_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 15)
gghistogram(g, x = "NfL_singlePlex", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 2)
gghistogram(g, x = "GFAP_NfL", y= "..count..", combine = FALSE, ylab = "Count", add = "mean", fill= "dark grey", rug = TRUE, bins = 25, binwidth = 4)
library(xtable)
library(Hmisc)
#add corstars
# x is a matrix containing the data
# method : correlation method. "pearson"" or "spearman"" is supported
# removeTriangle : remove upper or lower triangle
# results :  if "html" or "latex"
# the results will be displayed in html or latex format
corstars <-function(x, method=c("pearson", "spearman"), removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r # Matrix of correlation coeficients
p <- correlation_matrix$P # Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****", ifelse(p < .001, "*** ", ifelse(p < .01, "**  ", ifelse(p < .05, "*   ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
library(htmlTable)
#correlation matrix with p values in ***
corr_table_edss_bio <- corstars(g[,c("edss","age","GFAP_singlePlex", "NfL_singlePlex", "GFAP_NfL","Disease_duration")], method = "spearman", result = "html")
htmlTable(corr_table_edss_bio)
#calculate linear regression EDSS GFAP/NFL/Ratio
lm_edss_gfap <- lm(g$edss_log ~ g$gfap_log + g$age + g$dis_duration_log + factor(g$sex) + factor(g$ongoing) + factor(g$ms_verlauf))
summary(lm_edss_gfap)
lm_edss_nfl <- lm(g$edss_log ~ g$Nfl_log + g$age + g$dis_duration_log + factor(g$sex) + factor(g$ongoing) + factor(g$ms_verlauf))
summary(lm_edss_nfl)
lm_edss_GFAP_nfl <- lm(g$edss_log ~ g$GFAP_NfL_log + g$age + g$dis_duration_log + factor(g$sex) + factor(g$ongoing) + factor(g$ms_verlauf))
summary(lm_edss_GFAP_nfl)
htmlTable(corr_table_edss_bio)
corr_table_edss_bio <- corstars(g[,c("edss","age","GFAP_singlePlex", "NfL_singlePlex", "GFAP_NfL","Disease_duration")], method = "spearman", result = "html")
htmlTable(corr_table_edss_bio)
install.packages("Gmisc")
library(shiny)
runGitHub("Table1","dkilfoyle")
install.packages("shiny")
library(shiny)
runGitHub("Table1","dkilfoyle")
install.packages("shinyAce")
library(shiny)
runGitHub("Table1","dkilfoyle")
install.packages("RJSONIO")
RJSONIO
runGitHub("Table1","dkilfoyle")
runGitHub("Table1","dkilfoyle")
shiny:::runApp()
shiny::runApp()
runGitHub("Table1","dkilfoyle")
library(Gmisc)
runGitHub("Table1","dkilfoyle")
install.packages("whisker")
runGitHub("Table1","dkilfoyle")
runGitHub("Table1","dkilfoyle")
library(Gmisc)
runGitHub("Table1","dkilfoyle")
install.packages(c("dplyr", "glue", "pkgload"))
install.packages(c("dplyr", "glue", "pkgload"))
install.packages(c("dplyr", "glue", "pkgload"))
install.packages(c("dplyr", "glue", "pkgload"))
install.packages(c("dplyr", "glue", "pkgload"))
runGitHub("Table1","dkilfoyle")
library(shiny)
runGitHub("Table1","dkilfoyle")
install.packages("reactable")
library(reactable)
reactable(g)
source("http://pcwww.liv.ac.uk/~william/R/crosstab.r")
crosstab(g, row.vars = "progression", col.vars = c("ms_verlauf","sex"), type = "f")
crosstab(g, row.vars = "progression", col.vars = c("ms_verlauf","sex"), type = "f")
crosstab(g, row.vars = "progression", col.vars = c("ms_verlauf","sex"), type = "f")
str(Progress)
str(g$progression)
str(g$sex)
library(labelled)
remove_labels(g$sex)
crosstab(g, row.vars = "progression", col.vars = c("ms_verlauf","sex"), type = "f")
crosstab(g, row.vars = "progression", col.vars = c("ms_verlauf"), type = "f")
crosstab(g, row.vars = "progression", col.vars = c("ms_verlauf"))
crosstab(g, row.vars = "progression", col.vars = c("ms_verlauf"), type = "r")
crosstab(g, row.vars = "progression", col.vars = c("ms_verlauf"))
crosstab(g, row.vars = "progression", col.vars = c("sex"))
crosstab(g, row.vars = "progression", col.vars = mean(g$edss))
crosstab(g, row.vars = "progression", col.vars = mean(g$edss), exclude = NA)
mean_values <- mean(c[,"age","edss"]
mean_values <- mean(c[,"age","edss"])
mean_values <- mean(g[,c("age","edss"]))
mean_values <- mean(g[,c("age","edss"]))
